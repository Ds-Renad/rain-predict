# -*- coding: utf-8 -*-
"""VSlast

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wTKGwAC9gcXL1CzcbnThVc45w6FAIsnS
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import warnings

rain = pd.read_csv("C:/rain/Rain.csv")

rain.head()

rain.shape

#Feature Selection:
rain.drop(['WindSpeed3pm', 'Temp9am','Temp3pm'], axis=1, inplace=True)

rain.head()

#get unique locations
locations = rain['Location'].unique()
locations

#Checking the missing values
rain.isnull().sum()

rain2= rain.dropna()
rain2.shape

rain2.isnull().sum()

warnings.filterwarnings("ignore")

rain2['RainToday'] = rain2['RainToday'].map({'Yes': 1, 'No': 0})

# Convert the categorical "Location" column to binary columns using one-hot encoding
#data = pd.get_dummies(rain2, columns=["Location"])

"""##Deployment"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import warnings
import pickle
rain2 = np.array(rain2)

X = rain2[1:, 1:-1]
y = rain2[1:, -1]
y = y.astype('int')
X = X.astype('int')

# print(X,y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
log_reg = LogisticRegression()

log_reg.fit(X, y)

theinput=[int(x) for x in "55 30 10".split(' ')]
final=[np.array(theinput)]

b = log_reg.predict_proba(final)
output='{0:.{1}f}'.format(b[0][1], 2)
print(output)

pickle.dump(log_reg,open('model.pkl','wb'))
model=pickle.load(open('model.pkl','rb'))

